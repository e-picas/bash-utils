#!/usr/bin/env bash
#
# bash-utils - A *bash* library for better scripting
# <http://gitlab.com/piwi/bash-utils>
# Copyright (c) 2015 Pierre Cassat & contributors
#
# Licensed under the Apache Software Foundation license, Version 2.0;
# you may not use this file except in compliance with the License.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For sources & updates, see <http://gitlab.com/piwi/bash-utils>.
#
# To transmit bugs, see <http://gitlab.com/piwi/bash-utils/issues>.
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code or see
# <http://www.apache.org/licenses/LICENSE-2.0>.
#
set -e

[ -z "$BASH_UTILS_VERSION" ] && { \
    source "$(dirname "${BASH_SOURCE[0]}")/bash-utils-core" || \
        { echo "> ${BASH_SOURCE[0]}:${LINENO}: bash-utils-core not found!" >&2; exit 1; }; \
};

##@!@##

#### ARRAYS ####

# set an environment (global) array
# to get back the array values, call `get_env_array_ARRAY_NAME`
# usage: `set_env_array <name> <values = array[@]>`
set_env_array()
{
    local index="$1"
    declare -a values=("${!2}")
    eval "get_env_array_${index}(){ echo \"${values[@]}\"; };";
    return 0
}

# get the index of a value in an array
# usage: `array_search <item> <$array[@]>`
array_search ()
{
    [ $# -lt 2 ] && die 'usage: `array_search <item> <$array[@]>`';
    local i=-1 j
    local search="$1"
    shift
    declare -a args
    if [ $# -gt 1 ]; then
        args=("$@")
    else
        [[ -n "${!1:-}" ]] && args=("${!1}") || return 1;
    fi
    for ((j=0; j<"${#args[@]}"; j++)); do
        [ "$search" = "${args[$j]}" ] && i="$j";
    done
    [[ $i -ne -1 ]] && echo "$i" && return 0
    return 1
}

# test if a value is in an array ; returns 0 if it is found
# usage: `in_array <item> <$array[@]>`
in_array()
{
    [ $# -lt 2 ] && die 'usage: `in_array <item> <$array[@]>`';
    local needle="$1"
    shift
    declare -a args
    if [ $# -gt 1 ]; then
        args=("$@")
    else
        [[ -n "${!1:-}" ]] && args=("${!1}") || return 1;
    fi
    for item in "${args[@]}"; do
        [ "$needle" = "$item" ] && return 0
    done
    return 1
}

#### FILE SYSTEM ####

# get the number of the line matching a mask in a file (empty result if not found)
# usage: `get_line_number_matching <file_path> <mask>`
get_line_number_matching()
{
    [ $# -lt 1 ] && die 'usage: `get_line_number_matching <file_path> <mask>`';
    local path="$1"
    [ ! -e "$path" ] && die "file '${path}' not found";
    local match="$2"
    grep -n "$match" "$path" | cut -f1 -d:
    return 0
}

# add an entry in `$CMD_LOGFILE`
# usage: `log <message>`
log()
{
    [ $# -eq 0 ] && return 0;
    echo "$(date +'%x %R') ${CMD_USER}@${CMD_HOST} [$$]: $*" >> "$CMD_LOGFILE";
    return 0
}

# create a temporary file named like '$$...'
# usage: `make_tmp_file [suffix]`
make_tmp_file()
{
    local suffix='' tmpfile
    [ $# -gt 0 ] && suffix=".$1"
    tmpfile="$(mktemp -t "$$${suffix}.XXXXXX")"
    echo "$tmpfile"
    return 0
}

# get absolute path of a dir
# inspired by <https://github.com/sstephenson/bats>
# usage: `real_path_dirname <path>`
real_path_dirname()
{
    [ $# -lt 1 ] && die 'usage: `real_path_dirname <path>`';
    local cwd="$(pwd)"
    local path="$1"
    while [ -n "$path" ]; do
        cd "${path%/*}" 2>/dev/null
        local name="${path##*/}"
        path="$(resolve_link "$name" || true)"
    done
    pwd
    cd "$cwd"
    return 0
}

# resolve symbolic link
# inspired by <https://github.com/sstephenson/bats>
# usage: `resolve_link <path>`
resolve_link()
{
    [ $# -lt 1 ] && die 'usage: `resolve_link <path>`';
    $(type -p greadlink readlink | head -1) "$1"
    return 0
}

# delete eventual trailing slash
# usage: `strip_trailing_slash <path>`
strip_trailing_slash()
{
    [ $# -lt 1 ] && die 'usage: `strip_trailing_slash <path>`';
    local path="$1"
    echo "${1%/}"
    return 0
}

#### STRINGS ####

##@ ECHOCMD (read-only: 'builtin' or 'gnu')
## Test if 'echo' is shell builtin or program
if [ "$($(which echo) --version)" = '--version' ]
then declare -rx ECHOCMD='builtin' 2>/dev/null;
else declare -rx ECHOCMD='gnu' 2>/dev/null;
fi

#### _echo ( string )
## echoes the string with the true 'echo -e' command
## use this for colorization
_echo () {
    echo -e "$*" # this works on Linux (Ubuntu 14.04) & Darwin (Mac OSX with GNU-coreutils)
    return 0
#    tput sgr0
    case "$ECHOCMD" in
        gnu) $(which echo) -e "$*";;
        builtin) echo "$*";;
    esac
    return 0
}

#### _necho ( string )
## echoes the string with the true 'echo -en' command
## use this for colorization and no new line
_necho () {
    echo -ne "$*" # this works on Linux (Ubuntu 14.04) & Darwin (Mac OSX with GNU-coreutils)
    return 0
#    tput sgr0
    case "$ECHOCMD" in
        gnu) $(which echo) -en "$*";;
        builtin) echo -n "$*" >&2;;
    esac
    return 0
}

# transform a string in upper case
# usage: `string_to_upper <string>`
string_to_upper()
{
    [ $# -lt 1 ] && die 'usage: `string_to_upper <string>`';
    echo "$@" | tr '[:lower:]' '[:upper:]';
    return 0
}

# transform a string in lower case
# usage: `string_to_lower <string>`
string_to_lower()
{
    [ $# -lt 1 ] && die 'usage: `string_to_lower <string>`';
    echo "$@" | tr '[:upper:]' '[:lower:]';
    return 0
}

#### COMMAND INFO ####

export CMD_NAME='overwrite the CMD_NAME variable to customize this information'
export CMD_VERSION='overwrite the CMD_VERSION variable to customize this information'
export CMD_COPYRIGHT='overwrite the CMD_COPYRIGHT variable to customize this information'
export CMD_LICENSE='overwrite the CMD_LICENSE variable to customize this information'
export CMD_SOURCES='overwrite the CMD_SOURCES variable to customize this information'
export CMD_DESCRIPTION='overwrite the CMD_DESCRIPTION variable to customize this information'
export CMD_HELP='overwrite the CMD_HELP variable to customize this information'
declare -xa CMD_OPTS_SHORT=( f q v x V h )
declare -xa CMD_OPTS_LONG=( debug dry-run force quiet verbose version help )
declare -xa TO_DEBUG=(
    CMD_PROG CMD_ROOT CMD_HOST CMD_USER CMD_CWD CMD_PID CMD_OS
    CMD_CALL VERBOSE QUIET DEBUG FORCE DRY_RUN
)
set_env_array CMD_OPTS_SHORT CMD_OPTS_SHORT[@]
set_env_array CMD_OPTS_LONG CMD_OPTS_LONG[@]
set_env_array TO_DEBUG TO_DEBUG[@]
CMD_LOGFILE="$(make_tmp_file "$BASH_UTILS_KEY")"
export CMD_LOGFILE

# the synopsis should be left empty as it will be automatically generated with options declarations
export CMD_SYNOPSIS=''
#declare -x CMD_SYNOPSIS="$0 [-fqvx] [--debug|--dry-run|--force|--quiet|--verbose] [--] <arguments>"
# you can use `CMD_USAGE` instead, which will be added to default options
export CMD_USAGE=''

# script flags used as booleans
export VERBOSE=false        # write in verbose mode:    $VERBOSE && echo '...';
export QUIET=false          # write in not quiet mode:  $QUIET || echo '...';
export DEBUG=false          # write in debug mode:      $DEBUG && echo '...';
export FORCE=false          # write in force mode:      $FORCE && echo '...';
export DRY_RUN=false        # exec in not dry-run mode: $DRY_RUN || ...;

# list of Linux-like OSs
declare -xa LINUX_OS=(Linux FreeBSD OpenBSD SunOS)
set_env_array LINUX_OS LINUX_OS[@]

#### COMMONS LIB ####
# functions are written in alphabetical order

# write a comment string on STDOUT
# usage: `comment <string>`
comment()
{
    [ -n "$1" ] && echo "# $*" >&1
    return 0
}

# treat common options
# this will throw an error for unknown option if the `$CMD_OPTS_SHORT` is not prefixed by a colon `:`
# usage: `common_options "$@"`
common_options()
{
    local _todo=''
    while [ $# -gt 0 ]; do
        case "$1" in
            -f | --force )  FORCE=true;;
            -q | --quiet )  QUIET=true; VERBOSE=false;;
            -v | --verbose ) VERBOSE=true; QUIET=false;;
            -x | --debug )  DEBUG=true;;
            -V | --version) _todo='version_info && exit 0;';;
            -h | --help)    _todo='help_info && exit 0;';;
            --dry-run )     DRY_RUN=true;;
            -- )            shift; break;;
            * )             if ! is_known_option "$1" && [ "${CMD_OPTS_SHORT[0]}" != ":" ]
                                then error "unknown option '$1'"; fi;;
        esac
        shift
    done
    [ -n "$_todo" ] && eval "$_todo";
    return 0
}

# write help string to STDERR & exit
# usage: `help_info`
help_info()
{
    {   version_info true
        echo
        echo "$CMD_DESCRIPTION"
        echo
        usage_info
        echo
        echo "$CMD_HELP"
    } >&2
    exit 0
}

# test if an option is known by a command
# usage: `is_known_option <option_name>`
is_known_option()
{
    [ $# -lt 1 ] && die 'usage: `is_known_option <option_name>`';
    local opt="$1"
    opt="$(echo "$opt" | cut -d'=' -f1)"
    opt="${opt//:}"
    for o in "${CMD_OPTS_SHORT[@]}"; do
        o="${o//:}"
        [ -z "$o" ] && continue;
        [ "$o" = "$opt" ] && return 0;
    done
    for o in "${CMD_OPTS_LONG[@]}"; do
        o="${o//:}"
        [ -z "$o" ] && continue;
        [ "$o" = "$opt" ] && return 0;
    done
    return 1
}

# rearrange options & arguments and load them in `$CMD_REQ`
# howto:
#    rearrange_options "$@"
#    [ -n "$CMD_REQ" ] && eval set -- "$CMD_REQ";
# usage: `rearrange_options "$@"`
rearrange_options()
{
    local shorts=''
    for opt in "${CMD_OPTS_SHORT[@]}"; do
        shorts+="${opt}"
    done
    local longs=''
    for opt in "${CMD_OPTS_LONG[@]}"; do
        longs+="${opt},"
    done
    longs="${longs%,}"
    set +o posix
    set +E
    getoptvers="$(getopt --test > /dev/null; echo $?)"
    if [[ "$getoptvers" -eq 4 ]]; then
        # GNU enhanced getopt is available
        CMD_REQ="$(getopt --shell 'bash' --options "${shorts}-:" --longoptions "$longs" --name "$CMD_PROG" -- "$@")"
    else
        # original getopt is available
        CMD_REQ="$(getopt "shorts" "$@")"
    fi
    set -o posix
    set -E
    CMD_CALL="$0 $CMD_REQ"
    return 0
}

# echo synopsis info after having built it if it was empty
# usage: `get_synopsis`
synopsis_info()
{
    if [ -z "$CMD_SYNOPSIS" ]; then
        local shorts='' shorts_args=''
        for opt in "${CMD_OPTS_SHORT[@]}"; do
            [ "$opt" = ':' ] && continue;
            [ "${opt: -2}" = '::' ] && shorts_args+="|-${opt/::/}[=<arg>]" && continue;
            [ "${opt: -1}" = ':' ] && shorts_args+="|-${opt/:/} <arg>" && continue;
            shorts+="${opt}"
        done
        local longs=''
        for opt in "${CMD_OPTS_LONG[@]}"; do
            [ "$opt" = ':' ] && continue;
            [ "${opt: -2}" = '::' ] && longs+="--${opt/::/}[=<arg>]|" && continue;
            [ "${opt: -1}" = ':' ] && longs+="--${opt/:/} <arg>|" && continue;
            longs+="--${opt}|"
        done
        longs="${longs%|}"
        if [ -n "$CMD_USAGE" ]; then
            CMD_SYNOPSIS="$0 $CMD_USAGE
       $0 $CMD_MODULE [-${shorts}${shorts_args}] [${longs}] [--] <arguments>"
        else
            CMD_SYNOPSIS="$0 $CMD_MODULE [-${shorts}${shorts_args}] [${longs}] [--] <arguments>"
        fi
    fi
    echo "$CMD_SYNOPSIS"
    return 0
}

# echo usage string
# usage: `usage_info`
usage_info()
{
    local synopsis="$(synopsis_info)"
    echo "usage: $synopsis"
    return 0
}

# version string
# usage: `version_info`
version_info()
{
    local short="${1:-${QUIET:-false}}"
    if [ -n "$CMD_MODULE" ] && [ "$CMD_NAME" != "$BASH_UTILS_NAME" ]; then
        echo "$CMD_NAME $CMD_VERSION [$BASH_UTILS_MODULE_INFO $BASH_UTILS_NAME $BASH_UTILS_VERSION]"
    elif [ -z "$CMD_MODULE" ] && [ -n "$CMD_PROG" ] && [ "$CMD_NAME" != "$BASH_UTILS_NAME" ]; then
        echo "$CMD_NAME $CMD_VERSION [$BASH_UTILS_SCRIPT_INFO $BASH_UTILS_NAME $BASH_UTILS_VERSION]"
    else
        echo "$CMD_NAME $CMD_VERSION"
    fi
    if ! $short; then
        cat <<MSG
$CMD_COPYRIGHT
$CMD_LICENSE
$CMD_SOURCES
MSG
    fi
    return 0
}

# write an error string on STDERR without exiting
# usage: `warning <string>`
warning()
{
    [ -n "$1" ] && echo "> $*" >&2
    return 0
}

##@!@##
[ "$(basename "$0")" = "$(basename "${BASH_SOURCE[0]}")" ] && exit 0 || return 0;
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=sh
