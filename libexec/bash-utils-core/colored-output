#!/usr/bin/env bash
#
# bash-utils - A *bash* library for better scripting
# <http://gitlab.com/piwi/bash-utils>
# Copyright (c) 2015 Pierre Cassat & contributors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# For sources & updates, see <http://gitlab.com/piwi/bash-utils>.
#
# To transmit bugs, see <http://gitlab.com/piwi/bash-utils/issues>.
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code or see <http://www.gnu.org/licenses/>.
#

[ -z "$BASH_UTILS_VERSION" ] && { \
    source "$(dirname "${BASH_SOURCE[0]}")/bash-utils-core" || \
        { echo "> bash-utils-core not found!" >&2; exit 1; }; \
};

##@!@##
#### COLORIZED CONTENTS #############################################################################

if [ -z "${TEXTCOLORS:-}" ]; then
    ##@ TEXTCOLORS = ( default black red green yellow blue magenta cyan grey white lightred lightgreen lightyellow lightblue lightmagenta lightcyan lightgrey ) (read-only)
    ## Terminal colors table
    declare -rxa TEXTCOLORS=(default black red green yellow blue magenta cyan grey white lightred lightgreen lightyellow lightblue lightmagenta lightcyan lightgrey)
    declare -rxa TEXTCOLORS_CODES_FOREGROUND=(39 30 31 32 33 34 35 36 90 97 91 92 93 94 95 96 37)
    declare -rxa TEXTCOLORS_CODES_BACKGROUND=(49 40 41 42 43 44 45 46 100 107 101 102 103 104 105 106 47)

    ##@ TEXTOPTIONS = ( normal bold small underline blink reverse hidden ) (read-only)
    ## Terminal text options table
    declare -rxa TEXTOPTIONS=(normal bold small underline blink reverse hidden)
    declare -rxa TEXTOPTIONS_CODES=(0 1 2 4 5 7 8)
fi

## stop here on pre-loading
if ${PRELOAD:-false}; then return 0; fi

#### get_text_format_tag ( code )
## echoes the terminal tag code for color: "\ 033[CODEm"
##@param code must be one of the library colors or text-options codes
get_text_format_tag () {
    if [ -n "$1" ]; then
        case "$CMD_OS" in
            Linux|FreeBSD|OpenBSD|SunOS)
                echo "\033[${1}m";;
            *)
                echo "\x1B[${1}m";;
        esac
        return 0
    fi
    return 1
}

#### get_color_code ( name , background = false )
##@param name must be in TEXTCOLORS
get_color_code () {
    if [ -n "$1" ]; then
        if in_array "$1" "${TEXTCOLORS[@]}"; then
            if [ $# -gt 1 ]
                then echo "${TEXTCOLORS_CODES_BACKGROUND[$(array_search "$1" "${TEXTCOLORS[@]}")]}";
                else echo "${TEXTCOLORS_CODES_FOREGROUND[$(array_search "$1" "${TEXTCOLORS[@]}")]}";
            fi
            return 0
        fi
    fi
    return 1
}

#### get_color_tag ( name , background = false )
##@param name must be in TEXTCOLORS
get_color_tag () {
    if [ -n "$1" ]; then
        if in_array "$1" "${TEXTCOLORS[@]}"; then
            if [ $# -gt 1 ]
                then get_text_format_tag "${TEXTCOLORS_CODES_BACKGROUND[$(array_search "$1" "${TEXTCOLORS[@]}")]}";
                else get_text_format_tag "${TEXTCOLORS_CODES_FOREGROUND[$(array_search "$1" "${TEXTCOLORS[@]}")]}";
            fi
            return 0;
        fi
    fi
    return 1
}

#### get_text_option_code ( name )
##@param name must be in TEXTOPTIONS
get_text_option_code () {
    if [ -n "$1" ]; then
        if in_array "$1" "${TEXTOPTIONS[@]}"
        then
            echo "${TEXTOPTIONS_CODES[$(array_search "$1" "${TEXTOPTIONS[@]}")]}";
            return 0;
        fi
    fi
    return 1
}

#### get_text_option_tag ( name )
##@param name must be in TEXTOPTIONS
get_text_option_tag () {
    if [ -n "$1" ]; then
        if in_array "$1" "${TEXTOPTIONS[@]}"
        then
            get_text_format_tag "${TEXTOPTIONS_CODES[$(array_search "$1" "${TEXTOPTIONS[@]}")]}";
            return 0;
        fi
    fi
    return 1
}

#### get_text_option_tag_close ( name )
##@param name must be in TEXTOPTIONS
get_text_option_tag_close () {
    if [ -n "$1" ]; then
        if in_array "$1" "${TEXTOPTIONS[@]}"
        then
            get_text_format_tag "2${TEXTOPTIONS_CODES[$(array_search "$1" "${TEXTOPTIONS[@]}")]}";
            return 0;
        fi
    fi
    return 1
}

# usage: `colorize <string> <text_option> <foreground> <background>`
## echoes a colorized string ; all arguments are optional except `string`
##@param text_option must be in TEXTOPTIONS
##@param foreground must be in TEXTCOLORS
##@param background must be in TEXTCOLORS
colorize()
{
    [ $# -eq 0 ] && return 0;
    local textopt fgopt bgopt
    [ $# -gt 1 ] && textopt=$(get_text_option_code "$2");
    [ $# -gt 2 ] && fgopt=$(get_color_code "$3");
    [ $# -gt 3 ] && bgopt=$(get_color_code "$4" true);
    local add=''
    if [ ! -z "$textopt" ]; then add+="$textopt"; fi
    if [ ! -z "$fgopt" ]; then
        if [ -n "$add" ]; then add+=";${fgopt}"; else add+="$fgopt"; fi
    fi
    if [ ! -z "$bgopt" ]; then
        if [ -n "$add" ]; then add+=";${bgopt}"; else add+="$bgopt"; fi
    fi
    opentag="$(get_text_format_tag "$add")"
    closetag="$(get_text_format_tag "$(get_text_option_code normal)")"
    if [ ! -n "$add" ]
        then echo "$1"
        else echo "${opentag}${1}${closetag}"
    fi
    return 0
}

# usage: `parse_color_tags <"string with <bold>tags</bold>">`
## parse in-text tags like:
##     ... <bold>my text</bold> ...     // "tag" in TEXTOPTIONS
##     ... <red>my text</red> ...       // "tag" in TEXTCOLORS
##     ... <bgred>my text</bgred> ...   // "tag" in TEXTCOLORS, constructed as "bgTAG"
parse_color_tags()
{
    if [ $# -eq 0 ]; then return 0; fi
    transformed=''
    while read -r line; do
        declare -a doneopts=()
        transformedline="$line"
        for opt in $(echo "$line" | grep -o '<.[^/>]*>' | sed "s|^.*<\(.[^>]*\)>.*\$|\1|g"); do
            opt="${opt/\//}"
            if in_array "$opt" "${doneopts[@]-}"; then continue; fi
            doneopts+=("$opt")
            if in_array "$opt" "${TEXTOPTIONS[@]}"; then
                code="$(get_text_option_code "$opt")"
                tag="$(get_text_option_tag "$opt")"
                if in_array "$CMD_OS" "${LINUX_OS[@]}"
                    then normaltag="$(get_text_option_tag_close "$opt")"
                    else normaltag="$(get_text_option_tag normal)"
                fi
            elif in_array "$opt" "${TEXTCOLORS[@]}"; then
                code="$(get_color_code "$opt")"
                tag="$(get_color_tag "$opt")"
                normaltag="$(get_color_tag default)"
            elif in_array "${opt/bg/}" "${TEXTCOLORS[@]}"; then
                code="$(get_color_code "${opt/bg/}" true)"
                tag="$(get_color_tag "${opt/bg/}" true)"
                normaltag="$(get_color_tag default true)"
            else
                continue
            fi
            if in_array "$CMD_OS" "${LINUX_OS[@]}"; then
                 tag="$(printf '\%s' "$tag")"
                 normaltag="$(printf '\%s' "$normaltag")"
            fi
            if [ ! -z "$tag" ]; then
                strsubstituted=$(echo "$transformedline" | sed "s|<${opt}>|${tag}|g;s|</${opt}>|${normaltag}|g" 2> /dev/null);
                if [ ! -z "$strsubstituted" ]; then transformedline="$strsubstituted"; fi
            fi
        done
        if [ -n "$transformed" ]; then transformed+="\n"; fi
        transformed+="$transformedline"
    done <<< "$1"
    echo -e "$transformed" # this works on Linux (Ubuntu 14.04)
    return 0
}

# usage: `strip_colors <string>`
strip_colors()
{
    if [ $# -eq 0 ]; then return 0; fi
    transformed=''
    while read -r line; do
        case "$CMD_OS" in
            Linux|FreeBSD|OpenBSD|SunOS)
                stripped_line=$(echo "${line}" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g");;
            *)
                stripped_line=$(echo "${line}" | sed 's|\x1B\[[0-9;]*[a-zA-Z]||g');;
        esac
        if [ -n "${transformed}" ]; then transformed+="\n"; fi
        transformed+="${stripped_line}"
    done <<< "$1"
    _echo "${transformed}"
    return 0
}


##@!@##
[ "$(basename "$0")" = "$(basename "${BASH_SOURCE[0]}")" ] && exit 0 || return 0;
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=sh
