#!/usr/bin/env bash
#
# bash-utils - A *bash* library for better scripting
# <http://gitlab.com/piwi/bash-utils>
# Copyright (c) 2015 Pierre Cassat & contributors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# For sources & updates, see <http://gitlab.com/piwi/bash-utils>.
#
# To transmit bugs, see <http://gitlab.com/piwi/bash-utils/issues>.
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code or see <http://www.gnu.org/licenses/>.
#

[ -z "$BASH_UTILS_VERSION" ] && { \
    source "$(dirname "${BASH_SOURCE[0]}")/bash-utils-core" || \
        { echo "> bash-utils-core not found!" >&2; exit 1; }; \
};

##@!@##
#### ARRAYS ####

# use this variable to pass empty an array reference `EMPTY_ARRAY[@]`
declare -arx EMPTY_ARRAY=()

# get the index of a value in an array
# usage: `array_search <item> <$array[@]>`
array_search ()
{
    [ $# -lt 2 ] && die 'usage: `array_search <item> <$array[@]>`';
    local i=-1 j
    local search="$1"
    shift
    declare -a args
    if [ $# -gt 1 ]; then
        args=("$@")
    else
        [ -n "${!1:-}" ] && args=("${!1}") || return 1;
    fi
    for ((j=0; j<"${#args[@]}"; j++)); do
        [ "$search" = "${args[$j]}" ] && i="$j";
    done
    [[ $i -ne -1 ]] && echo "$i" && return 0
    return 1
}

# test if a value is in an array ; returns 0 if it is found
# usage: `in_array <item> <$array[@]>`
in_array()
{
    [ $# -lt 2 ] && die 'usage: `in_array <item> <$array[@]>`';
    local needle="$1"
    shift
    declare -a args
    if [ $# -gt 1 ]; then
        args=("$@")
    else
        [ -n "${!1:-}" ] && args=("${!1}") || return 1;
    fi
    for item in "${args[@]}"; do
        [ "$needle" = "$item" ] && return 0
    done
    return 1
}

##@!@##
[ "$(basename "$0")" = "$(basename "${BASH_SOURCE[0]}")" ] && exit 0 || return 0;
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=sh
