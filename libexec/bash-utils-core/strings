#!/usr/bin/env bash
#
# bash-utils - A *bash* library for better scripting
# <http://gitlab.com/piwi/bash-utils>
# Copyright (c) 2015 Pierre Cassat & contributors
#
# Licensed under the Apache Software Foundation license, Version 2.0;
# you may not use this file except in compliance with the License.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For sources & updates, see <http://gitlab.com/piwi/bash-utils>.
#
# To transmit bugs, see <http://gitlab.com/piwi/bash-utils/issues>.
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code or see
# <http://www.apache.org/licenses/LICENSE-2.0>.
#
set -e

[ -z "$BASH_UTILS_VERSION" ] && { \
    source "$(dirname "${BASH_SOURCE[0]}")/bash-utils-core" || \
        { echo "> bash-utils-core not found!" >&2; exit 1; }; \
};

##@!@##
#### STRINGS ####

##@ ECHOCMD (read-only: 'builtin' or 'gnu')
## Test if 'echo' is shell builtin or program
if [ "$($(which echo) --version)" = '--version' ]
then declare -rx ECHOCMD='builtin' 2>/dev/null;
else declare -rx ECHOCMD='gnu' 2>/dev/null;
fi

#### _echo ( string )
## echoes the string with the true 'echo -e' command
## use this for colorization
_echo () {
    echo -e "$*" # this works on Linux (Ubuntu 14.04) & Darwin (Mac OSX with GNU-coreutils)
    return 0
#    tput sgr0
    case "$ECHOCMD" in
        gnu) $(which echo) -e "$*";;
        builtin) echo "$*";;
    esac
    return 0
}

#### _necho ( string )
## echoes the string with the true 'echo -en' command
## use this for colorization and no new line
_necho () {
    echo -ne "$*" # this works on Linux (Ubuntu 14.04) & Darwin (Mac OSX with GNU-coreutils)
    return 0
#    tput sgr0
    case "$ECHOCMD" in
        gnu) $(which echo) -en "$*";;
        builtin) echo -n "$*" >&2;;
    esac
    return 0
}

# transform a string in upper case
# usage: `string_to_upper <string>`
string_to_upper()
{
    [ $# -lt 1 ] && die 'usage: `string_to_upper <string>`';
    echo "$@" | tr '[:lower:]' '[:upper:]';
    return 0
}

# transform a string in lower case
# usage: `string_to_lower <string>`
string_to_lower()
{
    [ $# -lt 1 ] && die 'usage: `string_to_lower <string>`';
    echo "$@" | tr '[:upper:]' '[:lower:]';
    return 0
}

##@!@##
[ "$(basename "$0")" = "$(basename "${BASH_SOURCE[0]}")" ] && exit 0 || return 0;
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=sh
