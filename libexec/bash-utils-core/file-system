#!/usr/bin/env bash
#
# bash-utils - A *bash* library for better scripting
# <http://gitlab.com/piwi/bash-utils>
# Copyright (c) 2015 Pierre Cassat & contributors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# For sources & updates, see <http://gitlab.com/piwi/bash-utils>.
#
# To transmit bugs, see <http://gitlab.com/piwi/bash-utils/issues>.
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code or see <http://www.gnu.org/licenses/>.
#

[ -z "$BASH_UTILS_VERSION" ] && { \
    source "$(dirname "${BASH_SOURCE[0]}")/bash-utils-core" || \
        { echo "> bash-utils-core not found!" >&2; exit 1; }; \
};

##@!@##
#### FILE SYSTEM ####

# get the number of the line matching a mask in a file (empty result if not found)
# usage: `get_line_number_matching <file_path> <mask>`
get_line_number_matching()
{
    [ $# -lt 1 ] && die 'usage: `get_line_number_matching <file_path> <mask>`';
    local path="$1"
    [ ! -e "$path" ] && die "file '${path}' not found";
    local match="$2"
    grep -n "$match" "$path" | cut -f1 -d:
    return 0
}

# get absolute path of a dir
# inspired by <https://github.com/sstephenson/bats>
# usage: `real_path_dirname <path>`
real_path_dirname()
{
    [ $# -lt 1 ] && die 'usage: `real_path_dirname <path>`';
    local cwd="$(pwd)"
    local path="$1"
    while [ -n "$path" ]; do
        cd "${path%/*}" 2>/dev/null
        local name="${path##*/}"
        path="$(resolve_link "$name" || true)"
    done
    pwd
    cd "$cwd"
    return 0
}

# resolve symbolic link
# inspired by <https://github.com/sstephenson/bats>
# usage: `resolve_link <path>`
resolve_link()
{
    [ $# -lt 1 ] && die 'usage: `resolve_link <path>`';
    $(type -p greadlink readlink | head -1) "$1"
    return 0
}

# delete eventual trailing slash
# usage: `strip_trailing_slash <path>`
strip_trailing_slash()
{
    [ $# -lt 1 ] && die 'usage: `strip_trailing_slash <path>`';
    local path="$1"
    echo "${1%/}"
    return 0
}

##@!@##
[ "$(basename "$0")" = "$(basename "${BASH_SOURCE[0]}")" ] && exit 0 || return 0;
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=sh
