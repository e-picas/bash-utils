#!/usr/bin/env bash-utils
#
# This script is a module for Bash-Utils
#
# --------
#
# bash-utils - A *bash* library for better scripting
# <http://gitlab.com/piwi/bash-utils>
# Copyright (c) 2015 Pierre Cassat & contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For sources & updates, see <http://gitlab.com/piwi/bash-utils>.
#
# To transmit bugs, see <http://gitlab.com/piwi/bash-utils/issues>.
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code or see
# <http://www.apache.org/licenses/LICENSE-2.0>.
#

#### MODULE NAME #############################################################################

# you can define here a string about module's usage (short synopsis), description, name and version:
CMD_NAME='overwrite the CMD_NAME variable to customize this information'
CMD_VERSION='overwrite the CMD_VERSION variable to customize this information'
CMD_DESCRIPTION='overwrite the CMD_DESCRIPTION variable to customize this information'
CMD_HELP='overwrite the CMD_HELP variable to customize this information'
# the synopsis should be left empty as it will be automatically generated with options declarations:
CMD_SYNOPSIS=''
#CMD_SYNOPSIS="$0 [-fqvx] [--debug|--dry-run|--force|--quiet|--verbose] [--] <arguments>"
# you can use `CMD_USAGE` instead, which will be added to default options:
CMD_USAGE=''
# custom script's options if needed:
#CMD_OPTS_SHORT=( f q v x V h )
#CMD_OPTS_LONG=( debug dry-run force quiet verbose version help )
#CMD_ARGS=()
#set_env_array CMD_OPTS_SHORT CMD_OPTS_SHORT[@]
#set_env_array CMD_OPTS_LONG CMD_OPTS_LONG[@]
#set_env_array CMD_ARGS CMD_ARGS[@]

# to add some information to the debug array, use:
#TO_DEBUG[${#TO_DEBUG[@]}]=BASH_UTILS_VERSION
#set_env_array TO_DEBUG TO_DEBUG[@]

## you MUST define some read-only variables only once (i.e. test if it is not already defined)
if [ -z "${MYVAR:-}" ]; then
    ## declaration of a simple variable
    declare -rx MYVAR='value'
    ## declaration of an array, MUST be exported with `set_env_array NAME VALUES[@]`
    declare -rxa MYARRAY=(value1 value2)
    set_env_array MYARRAY MYARRAY[@]
fi

## !! REQUIRED !! ## stop here on pre-loading
if ${PRELOAD:-false}; then return 0; fi

#######################
## module's logic, library ...

# to throw an error for 'non-dev' users
# error 'my error string'

# to throw an error for 'dev' users
# die 'my error string'

# to write a string in verbose mode only
# $VERBOSE && echo 'my string';

# to write a string in not quiet mode
# $QUIET || echo 'my string';

# to not execute a command in dry-run mode
# if $DRY_RUN; then echo 'rm -f filename.txt'; else rm -f filename.txt; fi

# see the 'bash-utils.7.man' for a complete documentation

# ...

#######################
## treat direct params ...

# called params should be treated directly for direct calls
if [ $# -gt 0 ] || [ -n "$CMD_MODULE" ]; then
    : # your treatments
fi

#######################
# a module should always exit or return with a status (0 for no error)
[ "$(basename "$0")" = "$(basename "${BASH_SOURCE[0]}")" ] && exit 0 || return 0;

## vim default shell setup (must be the very last line):
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=sh
